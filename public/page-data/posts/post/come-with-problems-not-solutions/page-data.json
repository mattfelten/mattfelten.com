{"componentChunkName":"component---src-templates-post-jsx","path":"/posts//post/come-with-problems-not-solutions","result":{"data":{"mdx":{"id":"856dc6b0-f8f4-5c56-8352-58cb1704c2f8","excerpt":"\"Let's just use Bootstrap.\" I've heard that statement more times in the past five years than I can count. \"Let's analyze the differences between Bootstrapâ€¦","frontmatter":{"title":"An Angry Rant about Front-end Frameworks and Design Systems"},"fields":{"date":"2018-03-05T08:00:00.000Z"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"An Angry Rant about Front-end Frameworks and Design Systems\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"\\u201CLet\\u2019s just use Bootstrap.\\u201D I\\u2019ve heard that statement more times in the past five years than I can count. \\u201CLet\\u2019s analyze the differences between Bootstrap, Foundation, and Material design to see what is the best for us to use.\\u201D Shoot me. \\u201CHave you used used \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"insert whatever new framework\"), \" yet? It\\u2019s pretty cool and would be pretty easy to implement.\\u201D \\uD83D\\uDC4B Later\"), mdx(\"p\", null, \"Let me say this. Frameworks are great if you\\u2019re hacking on a side project or prototyping a new feature for testing. You can get started super fast. Do it. If don\\u2019t have designers on your team, use Bootstrap. Your company or project obviously doesn\\u2019t care about standing out visually against competitors. Move fast.\"), mdx(\"p\", null, \"From here on, I\\u2019ll use design system to mean a custom front-end framework. It\\u2019s more than that but that\\u2019s a larger topic. I\\u2019ll also use Bootstrap as a scapegoat for all frameworks. Replace with your favorite. It still works.\"), mdx(\"h3\", null, \"\\u201CWhy should we create our own design system?\\u201D\"), mdx(\"p\", null, \"{: .section-title}\\nBecause you want to own your look and feel. Users decide the quality of your website or app within the first half-second of viewing it. If you\\u2019re ok looking unmemorable, fine, but any designer you work with will not allow that.\"), mdx(\"p\", null, \"Plus searching Stack Overflow for stupid Bootstrap bugs suck. Welcome to Garbage Code World.\"), mdx(\"h3\", null, \"\\u201CCan\\u2019t we just reskin Bootstrap?\\u201D\"), mdx(\"p\", null, \"{: .section-title}\\nSure if you want to add hacky code on top of bloated code. That\\u2019s like wanting pizza but getting a burger, so you pour sauce, cheese and pepperoni on top of the damn burger. It\\u2019s gonna be hard to eat and taste ridiculous.\"), mdx(\"h3\", null, \"\\u201CIt will be easier to on-board new developers with Bootstrap\\u201D\"), mdx(\"p\", null, \"{: .section-title}\\nTrue. Did you learn React in the last few years like everyone else? Cool. So you, and any decent developer, can learn new tools. Don\\u2019t make your system stupid and it\\u2019ll be fine.\"), mdx(\"hr\", null), mdx(\"p\", null, \"To be continued\", \"\\u2026\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/post/come-with-problems-not-solutions","previous":{"id":"fb8324b8-0e72-517f-ab4a-7d397b249386","fields":{"slug":"/post/horizontal-vertical-thinking","collection":"post"},"frontmatter":{"title":"Horizontal & Vertical Thinking in Design Systems"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Horizontal & Vertical Thinking in Design Systems\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I\\u2019ve been working as the Design System Lead at YouCaring for six months now. One of the lessons I\\u2019ve learned that I\\u2019m thinking a lot about right now is about horizontal and vertical thinking and it\\u2019s place within a design system.\"), mdx(\"span\", {\n    className: \"db mt6\"\n  }, \"![Horizontal Thinking](/assets/images/horizontal-thinking.png)\"), mdx(\"p\", null, \"Horizontal thinking is looking at the big picture of the problem, creating consistency across an entire project. Design systems on the surface are about this type of thinking. You are either building a whole system from scratch or most likely inheriting a system of varying degrees of consistency. You need to add and consolidate features into the design system that work across all use cases in your app and some hypothetical ones, making sure all the adopters of the system are able and willing to use them. An unused design system is just pretend work after all.\"), mdx(\"span\", {\n    className: \"db mt6\"\n  }, \"![Vertical Thinking](/assets/images/vertical-thinking.png)\"), mdx(\"p\", null, \"Vertical thinking is looking at the details of the problem, diving in to see what the unique circumstances are, and figuring out the best way to solve that specific problem. Product Designers are normally doing projects that require vertical thinking. How do we encourage conversion on X page? What\\u2019s the easiest way for X user to find Y feature? Those are vertical thinking projects, and are really important not only for business growth, but to guide how a design system evolves. The best design system is living and adapting, and this type of thinking is what does that.\"), mdx(\"p\", null, \"When working on a design system, vertical thinking is very important when the system is being implemented. Components in the system need to be consistent but also need to work well once they\\u2019re implemented. I\\u2019ll explain.\"), mdx(\"hr\", null), mdx(\"p\", null, \"A few months in, after laying the groundwork for the design system, I started work on the gold standard of design system problems - buttons. After looking at our interface inventory, I was able to consolidate all of our different buttons into three common sizes \", \"\\u2014\", \" small, medium, and large. We also made three different looks \", \"\\u2014\", \" solid, outlined, and text-only. Then we made five different color variations we might use. That\\u2019s 45 consistent button styles that we have in our back pocket, which seems reasonable for any use case we\\u2019d need a button for. So we started replacing them all. About 300 buttons by best guess.\"), mdx(\"p\", null, \"Finished. Shipped. High fives all around.\"), mdx(\"p\", null, \"It took two weeks for us to find out a button in a key form in our application was now underperforming. The button was quite large. It was replaced with the largest button in our new, theoretically-perfect button system. The result was a button that was about 3/4th the size and was being clicked less. Looking back, I failed to understand why some of the outlier elements came to exist before making a sweeping change for consistency.\"), mdx(\"hr\", null), mdx(\"p\", null, \"I could have payed more attention to the fact that I was changing key flows. Documenting high-traffic / high-impact user paths will guide when it is appropriate to do more thorough testing before rolling out all users.\"), mdx(\"p\", null, \"I was also too focused on horizontal thinking, making sure we had a broad button system implemented that worked great for the majority of our application. Had I spent more time vertical thinking - looking at the outliers of what was being changed - I could have noticed how drastically different a couple of them were and then analyzed how to proceed more appropriately. Those edge-cases are important.\"), mdx(\"p\", null, \"Once I notice I\\u2019m too focused on either vertical or horizontal methods of thinking, I need to pause and reconsider what is needed for the task. Too much vertical thinking will get too in the weeds with considerations and the design system will become fragmented from exceptions. Too much horizontal thinking will lead to a very consistent but rigid system that doesn\\u2019t serve business goals. A balance of both is necessary.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%7B%7Bsite.author.url%7D%7D\"\n  }), \"What do you think?\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"ecd2f779-790d-5610-93e5-d0525e8d5d75","fields":{"slug":"/post/imposter","collection":"post"},"frontmatter":{"title":"I'm An Imposter"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"I'm An Imposter\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I\\u2019ve been a professional designer for 9 years now. I\\u2019ve worked on some really cool projects and for some really great people. Things I\\u2019m really proud about. Most of my career though, I\\u2019ve worked relatively alone.\"), mdx(\"p\", null, \"The agencies I worked for have been small. One or two people and myself. The largest was eight. Freelancing, I\\u2019d be the guy behind the scenes making everything bulletproof, building the site, polishing the dark corners of the design handed to me, designing a site in a vaccum to the project managers whims.\"), mdx(\"p\", null, \"I guess it\\u2019s time I come to terms with something. I have no idea what I\\u2019m doing. I did not have anyone show me the ropes of design or front-end development. I\\u2019ve learned a lot of things from the people I was around. I read a lot of books and websites. I (try to) pay attention and figure out why something was created the way it was.\"), mdx(\"p\", null, \"I had relatively few managers so now that I\\u2019m leading a team, I\\u2019m scrambling to make sure I\\u2019m doing it right. But how do I help a great group of people be better designers if I myself don\\u2019t even know if I\\u2019m doing it right?\"), mdx(\"p\", null, \"My name is Matt and I have imposter syndrome.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}}}