{"componentChunkName":"component---src-templates-post-jsx","path":"/posts/come-with-problems-not-solutions","result":{"data":{"mdx":{"id":"39478a11-34cf-56e9-93dc-cdfc6ba76c83","excerpt":"Bring me solutions, not problems!  —  Business Bro For discussion-sake, here's an example scenario I want to break down. A customer reports a bug to your…","frontmatter":{"title":"Bring Me Problems, Not Solutions"},"fields":{"date":"2018-01-18T08:00:00.000Z"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Bring Me Problems, Not Solutions\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Bring me solutions, not problems! \", mdx(\"cite\", null, \"\\u2014\", \" Business Bro\"))), mdx(\"p\", null, \"For discussion-sake, here\\u2019s an example scenario I want to break down. A customer reports a bug to your customer support team. The support agent makes a ticket. The product manager sees the ticket and figures out a way to fix it. They give the designer a task to design that new piece of UI. If your designer-sense is tingling, keep reading.\"), mdx(\"p\", null, \"The trigger here is that the solution was already designed by the time it was handed to the designer. The idea part is already done. The only part left to do is to push some pixels to hand over to engineering. Boring!\"), mdx(\"p\", null, \"An issue I see in young and growing design teams is the idea of ownership over the solution. The fun part has been taken away, so we have two options \", \"\\u2014\", \" begrudgingly design the idea at 40% effort or push back on it. My favorite is when the idea gets pushed back on because it wasn\\u2019t created with a \\u201Cproper process\\u201D. Days are spent researching, iterating on mockups, and testing. And then at the end, the best solution is the same one. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"eye roll\")), mdx(\"p\", null, \"My theory is that everyone outside of design has heard the phrase at the top of this post their entire career. Coming to a manager with a problem and then the solution is the thing that you get a raise or promotion for. You\\u2019re a go-getter.\"), mdx(\"p\", null, \"We designers ask everyone to do the exact opposite. We are trained on how to be the solution-bringers. To add the right amount of process to the problem. To diverge and converge enough times to come up with a perfectly nuanced solution. Yay us.\"), mdx(\"p\", null, \"One thing I try to encourage designers to do is to look at the request as just that \", \"\\u2014\", \" a request. We can change it. If you can add to it, do it. If it seems reasonable as-is, do it. If you don\\u2019t fully understand what\\u2019s happening, get clarity. If you have a hypothesis for other ideas, test it. Everyone wants to solve the problem the best way possible.\"), mdx(\"p\", null, \"We can have input (or \\u201Ca seat at the table\\u201D) as long as it doesn\\u2019t become combative. We are on the same team so we need to act like it. I don\\u2019t like improve generally but the \\u201CYes, and..\\u201D phrase is really powerful for this. Whatever level of detail task you get is a great start. What you do with it is up to you.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"come-with-problems-not-solutions","previous":{"id":"fb8324b8-0e72-517f-ab4a-7d397b249386","fields":{"slug":"horizontal-vertical-thinking","collection":"post"},"frontmatter":{"title":"Horizontal & Vertical Thinking in Design Systems"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Horizontal & Vertical Thinking in Design Systems\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I\\u2019ve been working as the Design System Lead at YouCaring for six months now. One of the lessons I\\u2019ve learned that I\\u2019m thinking a lot about right now is about horizontal and vertical thinking and it\\u2019s place within a design system.\"), mdx(\"span\", {\n    className: \"db mt6\"\n  }, \"![Horizontal Thinking](/assets/images/horizontal-thinking.png)\"), mdx(\"p\", null, \"Horizontal thinking is looking at the big picture of the problem, creating consistency across an entire project. Design systems on the surface are about this type of thinking. You are either building a whole system from scratch or most likely inheriting a system of varying degrees of consistency. You need to add and consolidate features into the design system that work across all use cases in your app and some hypothetical ones, making sure all the adopters of the system are able and willing to use them. An unused design system is just pretend work after all.\"), mdx(\"span\", {\n    className: \"db mt6\"\n  }, \"![Vertical Thinking](/assets/images/vertical-thinking.png)\"), mdx(\"p\", null, \"Vertical thinking is looking at the details of the problem, diving in to see what the unique circumstances are, and figuring out the best way to solve that specific problem. Product Designers are normally doing projects that require vertical thinking. How do we encourage conversion on X page? What\\u2019s the easiest way for X user to find Y feature? Those are vertical thinking projects, and are really important not only for business growth, but to guide how a design system evolves. The best design system is living and adapting, and this type of thinking is what does that.\"), mdx(\"p\", null, \"When working on a design system, vertical thinking is very important when the system is being implemented. Components in the system need to be consistent but also need to work well once they\\u2019re implemented. I\\u2019ll explain.\"), mdx(\"hr\", null), mdx(\"p\", null, \"A few months in, after laying the groundwork for the design system, I started work on the gold standard of design system problems - buttons. After looking at our interface inventory, I was able to consolidate all of our different buttons into three common sizes \", \"\\u2014\", \" small, medium, and large. We also made three different looks \", \"\\u2014\", \" solid, outlined, and text-only. Then we made five different color variations we might use. That\\u2019s 45 consistent button styles that we have in our back pocket, which seems reasonable for any use case we\\u2019d need a button for. So we started replacing them all. About 300 buttons by best guess.\"), mdx(\"p\", null, \"Finished. Shipped. High fives all around.\"), mdx(\"p\", null, \"It took two weeks for us to find out a button in a key form in our application was now underperforming. The button was quite large. It was replaced with the largest button in our new, theoretically-perfect button system. The result was a button that was about 3/4th the size and was being clicked less. Looking back, I failed to understand why some of the outlier elements came to exist before making a sweeping change for consistency.\"), mdx(\"hr\", null), mdx(\"p\", null, \"I could have payed more attention to the fact that I was changing key flows. Documenting high-traffic / high-impact user paths will guide when it is appropriate to do more thorough testing before rolling out all users.\"), mdx(\"p\", null, \"I was also too focused on horizontal thinking, making sure we had a broad button system implemented that worked great for the majority of our application. Had I spent more time vertical thinking - looking at the outliers of what was being changed - I could have noticed how drastically different a couple of them were and then analyzed how to proceed more appropriately. Those edge-cases are important.\"), mdx(\"p\", null, \"Once I notice I\\u2019m too focused on either vertical or horizontal methods of thinking, I need to pause and reconsider what is needed for the task. Too much vertical thinking will get too in the weeds with considerations and the design system will become fragmented from exceptions. Too much horizontal thinking will lead to a very consistent but rigid system that doesn\\u2019t serve business goals. A balance of both is necessary.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"%7B%7Bsite.author.url%7D%7D\"\n  }), \"What do you think?\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"next":{"id":"39478a11-34cf-56e9-93dc-cdfc6ba76c83","fields":{"slug":"come-with-problems-not-solutions","collection":"post"},"frontmatter":{"title":"Bring Me Problems, Not Solutions"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Bring Me Problems, Not Solutions\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Bring me solutions, not problems! \", mdx(\"cite\", null, \"\\u2014\", \" Business Bro\"))), mdx(\"p\", null, \"For discussion-sake, here\\u2019s an example scenario I want to break down. A customer reports a bug to your customer support team. The support agent makes a ticket. The product manager sees the ticket and figures out a way to fix it. They give the designer a task to design that new piece of UI. If your designer-sense is tingling, keep reading.\"), mdx(\"p\", null, \"The trigger here is that the solution was already designed by the time it was handed to the designer. The idea part is already done. The only part left to do is to push some pixels to hand over to engineering. Boring!\"), mdx(\"p\", null, \"An issue I see in young and growing design teams is the idea of ownership over the solution. The fun part has been taken away, so we have two options \", \"\\u2014\", \" begrudgingly design the idea at 40% effort or push back on it. My favorite is when the idea gets pushed back on because it wasn\\u2019t created with a \\u201Cproper process\\u201D. Days are spent researching, iterating on mockups, and testing. And then at the end, the best solution is the same one. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"eye roll\")), mdx(\"p\", null, \"My theory is that everyone outside of design has heard the phrase at the top of this post their entire career. Coming to a manager with a problem and then the solution is the thing that you get a raise or promotion for. You\\u2019re a go-getter.\"), mdx(\"p\", null, \"We designers ask everyone to do the exact opposite. We are trained on how to be the solution-bringers. To add the right amount of process to the problem. To diverge and converge enough times to come up with a perfectly nuanced solution. Yay us.\"), mdx(\"p\", null, \"One thing I try to encourage designers to do is to look at the request as just that \", \"\\u2014\", \" a request. We can change it. If you can add to it, do it. If it seems reasonable as-is, do it. If you don\\u2019t fully understand what\\u2019s happening, get clarity. If you have a hypothesis for other ideas, test it. Everyone wants to solve the problem the best way possible.\"), mdx(\"p\", null, \"We can have input (or \\u201Ca seat at the table\\u201D) as long as it doesn\\u2019t become combative. We are on the same team so we need to act like it. I don\\u2019t like improve generally but the \\u201CYes, and..\\u201D phrase is really powerful for this. Whatever level of detail task you get is a great start. What you do with it is up to you.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}}}